# Generated by CodiumAI
import pytest

"""
Code Analysis

Main functionalities:
The RegisterForm class is a FlaskForm used for user registration. It contains fields for the user's username, first name, last name, email, and PIN. The main functionalities of this class are:
- To provide a form for users to register with the website or application.
- To validate user input for the required fields using the validators provided by the wtforms library.
- To render the form with placeholders for each field using the render_kw parameter.

Methods:
The RegisterForm class does not have any methods defined explicitly. However, it inherits methods from the FlaskForm class, such as validate_on_submit(), which validates the form when it is submitted, and populate_obj(obj), which populates an object with the form data.

Fields:
The RegisterForm class has the following fields:
- username: a StringField for the user's username, with validators for data required and length between 5 and 20 characters. It also has a placeholder for the login name.
- first_name: a StringField for the user's first name, with validators for data required and length between 2 and 50 characters. It also has a placeholder for the first name.
- last_name: a StringField for the user's last name, with validators for data required and length between 2 and 50 characters. It also has a placeholder for the last name.
- email: a StringField for the user's email, with validators for data required and email format.
- pin: a PasswordField for the user's PIN, with validators for data required and length of 4 characters. It also has a placeholder for the 4-digit PIN.
- pin2: a PasswordField for confirming the user's PIN, with validators for data required, length of 4 characters, and equality to the pin field. It also has a placeholder for confirming the 4-digit PIN.
- submit: a SubmitField for submitting the registration form.
"""


class TestRegisterForm:
    # Tests that a valid registration form submission is successful.
    def test_valid_registration_form_submission(self, client):
        """
        Test that a valid registration form submission is successful.
        """
        response = client.post(
            "/register",
            data={
                "username": "testuser",
                "first_name": "Test",
                "last_name": "User",
                "email": "testuser@example.com",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert response.status_code == 200
        assert b"Registration successful!" in response.data

    # Tests that an error message is displayed when a username is too short.
    def test_short_username(self, client):
        """
        Test that an error message is displayed when a username is too short.
        """
        response = client.post(
            "/register",
            data={
                "username": "test",
                "first_name": "Test",
                "last_name": "User",
                "email": "testuser@example.com",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert b"Field must be between 5 and 20 characters long." in response.data

    # Tests that an error message is displayed when a username is too long.
    def test_long_username(self, client):
        """
        Test that an error message is displayed when a username is too long.
        """
        response = client.post(
            "/register",
            data={
                "username": "testusernametestusernametestusernametestusernametestusername",
                "first_name": "Test",
                "last_name": "User",
                "email": "testuser@example.com",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert b"Field must be between 5 and 20 characters long." in response.data

    # Tests that an error message is displayed when a first or last name is too short.
    def test_short_name(self, client):
        """
        Test that an error message is displayed when a first or last name is too short.
        """
        response = client.post(
            "/register",
            data={
                "username": "testuser",
                "first_name": "T",
                "last_name": "User",
                "email": "testuser@example.com",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert b"Field must be between 2 and 50 characters long." in response.data

    # Tests that an error message is displayed when a first or last name is too long.
    def test_long_name(self, client):
        """
        Test that an error message is displayed when a first or last name is too long.
        """
        response = client.post(
            "/register",
            data={
                "username": "testuser",
                "first_name": "Testusertestusertestusertestusertestusertestusertestuser",
                "last_name": "User",
                "email": "testuser@example.com",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert b"Field must be between 2 and 50 characters long." in response.data

    # Tests that an error message is displayed when an invalid email address is entered.
    def test_invalid_email(self, client):
        """
        Test that an error message is displayed when an invalid email address is entered.
        """
        response = client.post(
            "/register",
            data={
                "username": "testuser",
                "first_name": "Test",
                "last_name": "User",
                "email": "invalidemail",
                "pin": "1234",
                "pin2": "1234",
            },
        )
        assert b"Invalid email address." in response.data

    # Tests that the form is submitted successfully with a valid 6 digit code.
    def test_valid_code_submission(self, client):
        """
        Test that the form is submitted successfully with a valid 6 digit code.
        """
        response = client.post(
            "/two-step-verification", data={"code": "123456", "remember_me": False}
        )
        assert response.status_code == 200
        assert b"Verification successful!" in response.data

    # Tests that the form is submitted successfully when the "Remember Me" checkbox is checked.
    def test_remember_me_checkbox(self, client):
        """
        Test that the form is submitted successfully when the "Remember Me" checkbox is checked.
        """
        response = client.post(
            "/two-step-verification", data={"code": "123456", "remember_me": True}
        )
        assert response.status_code == 200
        assert b"Verification successful!" in response.data

    # Tests that the form displays an error message when a code with less than 6 digits is submitted.
    def test_short_code_submission(self, client):
        """
        Test that the form displays an error message when a code with less than 6 digits is submitted.
        """
        response = client.post(
            "/two-step-verification", data={"code": "12345", "remember_me": False}
        )
        assert response.status_code == 200
        assert b"Field must be between 6 and 6 characters long." in response.data

    # Tests that the form displays an error message when a code with more than 6 digits is submitted.
    def test_long_code_submission(self, client):
        """
        Test that the form displays an error message when a code with more than 6 digits is submitted.
        """
        response = client.post(
            "/two-step-verification", data={"code": "1234567", "remember_me": False}
        )
        assert response.status_code == 200
        assert b"Field must be between 6 and 6 characters long." in response.data

    # Tests that the form displays an error message when submitted without entering a code.
    def test_empty_code_submission(self, client):
        """
        Test that the form displays an error message when submitted without entering a code.
        """
        response = client.post(
            "/two-step-verification", data={"code": "", "remember_me": False}
        )
        assert response.status_code == 200
        assert b"This field is required." in response.data

    # Tests that the form is submitted successfully when the "Remember Me" checkbox is not checked.
    def test_empty_checkbox_submission(self, client):
        """
        Test that the form is submitted successfully when the "Remember Me" checkbox is not checked.
        """
        response = client.post(
            "/two-step-verification", data={"code": "123456", "remember_me": False}
        )
        assert response.status_code == 200
        assert b"Verification successful!" in response.data
